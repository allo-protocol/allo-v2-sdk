import { ConstructorArgs, DeployParams, Metadata, TransactionData } from "../../Common/types";
import { PayoutSummary, Status } from "../types";
import { Distribution, InitializeParamsDonationVoting, Permit2Data, Recipient, RegisterDataDonationVoting } from "./types";
export declare class DonationVotingMerkleDistributionStrategy {
    private client;
    private contract;
    private strategy;
    private poolId;
    private allo;
    constructor({ chain, rpc, address, poolId }: ConstructorArgs);
    setPoolId(poolId: number): Promise<void>;
    setContract(address: `0x${string}`): void;
    private checkPoolId;
    private checkStrategy;
    getInitializeData(params: InitializeParamsDonationVoting): Promise<`0x${string}`>;
    getDeployParams(strategyType: string): DeployParams;
    getNative(): Promise<string>;
    getPermit2(): Promise<string>;
    getAllocationEndTime(): Promise<number>;
    getAllocationStartTime(): Promise<number>;
    getIsAllowedToken(token: string): Promise<boolean>;
    getClaim(recipient: string, token: string): Promise<number>;
    getDistributionMetadata(): Promise<Metadata>;
    getDistributionStarted(): Promise<boolean>;
    getAllo(): Promise<string>;
    getPayouts(recipientIds: string[], data: string[]): Promise<PayoutSummary[]>;
    getPoolAmount(): Promise<number>;
    getPoolId(): Promise<number>;
    getRecipient(recipientId: string): Promise<Recipient>;
    getRecipientStatus(recipientId: string): Promise<Status>;
    getStrategyId(): Promise<string>;
    getHasBeenDistributed(index: number): Promise<boolean>;
    getIsDistributionSet(): Promise<boolean>;
    getIsPoolActive(): Promise<boolean>;
    getIsValidAllocator(allocator: `0x${string}`): Promise<boolean>;
    getMerkleRoot(): Promise<string>;
    getMetadataRequired(): Promise<boolean>;
    getRecipientToStatusIndexes(recipient: string): Promise<number[]>;
    getRecipientsCounter(): Promise<number>;
    getRegistrationEndTime(): Promise<number>;
    getRegistrationStartTime(): Promise<number>;
    getStatusAtIndex(index: number): Promise<number>;
    getTotalPayoutAmount(): Promise<number>;
    useRegistryAnchor(): Promise<boolean>;
    getAllocationData(data: Permit2Data, ethAmount?: bigint): TransactionData;
    getBatchAllocationData(data: Permit2Data[], ethAmount?: bigint): TransactionData;
    getRegisterRecipientData(data: RegisterDataDonationVoting): TransactionData;
    getBatchRegisterRecipientData(data: RegisterDataDonationVoting[]): TransactionData;
    distribute(data: Distribution[]): TransactionData;
    claim(claims: {
        recipientId: string;
        token: string;
    }[]): TransactionData;
    multicall(data: string[]): TransactionData;
    reviewRecipients(statuses: {
        index: number;
        statusRow: number;
    }[]): TransactionData;
    updateDistribution(merkleRoot: string, distributionMetadata: Metadata): TransactionData;
    updatePoolTimestamps(registrationStartTime: number, registrationEndTime: number, allocationStartTime: number, allocationEndTime: number): TransactionData;
    withdraw(amount: number): TransactionData;
}
